/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.7/userguide/building_java_projects.html
 */

plugins {
    id 'java'
    id 'groovy'
    id 'application'
    id 'org.graalvm.buildtools.native' version '0.9.10'
}

version = '1.3.0'
group = 'io.seqera'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

repositories {
    mavenCentral()
}

def nativeCliTest = sourceSets.create('nativeCliTest')

configurations[nativeCliTest.implementationConfigurationName].extendsFrom(configurations.testImplementation)
configurations[nativeCliTest.runtimeOnlyConfigurationName].extendsFrom(configurations.testRuntimeOnly)


dependencies {
    // This dependency is used by the application.
    implementation "ch.qos.logback:logback-classic:1.2.3"
    runtimeOnly 'mysql:mysql-connector-java:8.0.22'
    runtimeOnly 'com.h2database:h2:1.4.200'
    runtimeOnly 'mysql:mysql-connector-java:8.0.28'
    runtimeOnly 'org.xerial:sqlite-jdbc:3.36.0.3'
    implementation 'info.picocli:picocli:4.6.3'
    annotationProcessor 'info.picocli:picocli-codegen:4.6.3'
    
    // Use the latest Groovy version for Spock testing
    testImplementation "org.codehaus.groovy:groovy:3.0.9"
    testImplementation "org.codehaus.groovy:groovy-nio:3.0.9"
    testImplementation platform("org.spockframework:spock-bom:2.1-groovy-3.0")
    testImplementation "org.spockframework:spock-core"
    testImplementation "org.spockframework:spock-junit4"  // you can remove this if your code does not rely on old JUnit 4 rules
    testImplementation 'junit:junit:4.13'
    testImplementation "org.testcontainers:testcontainers:1.16.3"
    testImplementation "org.testcontainers:mysql:1.16.3"
    testImplementation "org.testcontainers:spock:1.16.3"

    // Dummy library containing some migration files among their resources for testing purposes
    testImplementation files("libs/jar-with-resources.jar")

    nativeCliTestImplementation project
    nativeCliTestImplementation "org.codehaus.groovy:groovy-sql:3.0.9"
}

test {
    useJUnitPlatform()
}

application {
    // Define the main class for the application.
    mainClass = 'io.seqera.migtool.App'
    applicationDefaultJvmArgs = ["-agentlib:native-image-agent=config-merge-dir=conf/"]
}

ext.aws_access_key_id = project.findProperty('aws_access_key_id') ?: System.getenv('AWS_ACCESS_KEY_ID')
ext.aws_secret_access_key = project.findProperty('aws_secret_access_key') ?: System.getenv('AWS_SECRET_ACCESS_KEY')
ext.publishRepoUrl = project.findProperty('publish_repo_url') ?: System.getenv('PUBLISH_REPO_URL') ?: ( version.endsWith('-SNAPSHOT') ? "s3://maven.seqera.io/snapshots" : "s3://maven.seqera.io/releases" )

jar {
    //from sourceSets.main.allSource
}

graalvmNative {
    binaries {
        main {
            imageName = 'migtool'
            mainClass = 'io.seqera.migtool.App'
            configurationFileDirectories.from(file('conf'))

            buildArgs(org.gradle.nativeplatform.platform.internal.DefaultNativePlatform.currentOperatingSystem.isLinux() ? ['--static', ] : [])
            buildArgs.add('--allow-incomplete-classpath')
            buildArgs.add('--report-unsupported-elements-at-runtime')
            buildArgs.add('--initialize-at-run-time=sun.nio.ch.WindowsAsynchronousFileChannelImpl$DefaultIocpHolder')
            buildArgs.add('-H:+AddAllCharsets')
            buildArgs.add('-H:EnableURLProtocols=https,http')
            buildArgs.add('-H:+ReportExceptionStackTraces')
            buildArgs.add('-H:-CheckToolchain')
            buildArgs.add('-H:IncludeResources=.*/TlsSettings.properties$')
            buildArgs.add('-H:+StaticExecutableWithDynamicLibC')
            buildArgs.add('-H:+PrintClassInitialization')
        }
    }
}

def nativeCliTestTask = tasks.register('nativeCliTest', Test) {
    description = 'Runs nativeCli tests.'
    group = 'verification'
    useJUnitPlatform()

    testClassesDirs = nativeCliTest.output.classesDirs
    classpath = configurations[nativeCliTest.runtimeClasspathConfigurationName] + nativeCliTest.output

    dependsOn nativeCompile
    environment 'NATIVE_BINARY_PATH', "$buildDir/native/nativeCompile/migtool"
}

tasks.named('check') {
    dependsOn(nativeCliTestTask)
}
